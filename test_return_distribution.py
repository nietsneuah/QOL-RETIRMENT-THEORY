#!/usr/bin/env python3
"""
Quick test to see the actual return distributions being generated by our Monte Carlo
"""

import numpy as np
import matplotlib.pyplot as plt
from src.qol_framework import HypotheticalPortfolioQOLAnalysis

# Create framework instance
framework = HypotheticalPortfolioQOLAnalysis()

# Generate 1000 simulations of 30 years of returns
equity_returns, bond_returns = framework.simulate_market_returns(30)

# Flatten to get all annual return values
all_equity_returns = equity_returns.flatten()
all_bond_returns = bond_returns.flatten()

print("=== MONTE CARLO RETURN DISTRIBUTION ANALYSIS ===")
print(f"Equity Returns:")
print(f"  Mean: {np.mean(all_equity_returns):.1%}")
print(f"  Std Dev: {np.std(all_equity_returns):.1%}")
print(f"  Worst 5%: {np.percentile(all_equity_returns, 5):.1%}")
print(f"  Best 5%: {np.percentile(all_equity_returns, 95):.1%}")
print(f"  Worst single year: {np.min(all_equity_returns):.1%}")
print(f"  Best single year: {np.max(all_equity_returns):.1%}")

print(f"\nBond Returns:")
print(f"  Mean: {np.mean(all_bond_returns):.1%}")
print(f"  Std Dev: {np.std(all_bond_returns):.1%}")
print(f"  Worst 5%: {np.percentile(all_bond_returns, 5):.1%}")
print(f"  Best 5%: {np.percentile(all_bond_returns, 95):.1%}")

# Check for bear market sequences (3+ consecutive years of negative equity returns)
bear_market_count = 0
for sim in range(1000):
    sim_returns = equity_returns[sim, :]
    consecutive_negative = 0
    max_consecutive = 0
    for ret in sim_returns:
        if ret < 0:
            consecutive_negative += 1
            max_consecutive = max(max_consecutive, consecutive_negative)
        else:
            consecutive_negative = 0
    if max_consecutive >= 3:
        bear_market_count += 1

print(f"\nBear Market Analysis:")
print(f"  Simulations with 3+ consecutive negative years: {bear_market_count}/1000 ({bear_market_count/10:.1%})")

# Check early retirement sequence risk (first 5 years performance)
early_bad_performance = 0
for sim in range(1000):
    first_5_years = equity_returns[sim, :5]
    avg_first_5 = np.mean(first_5_years)
    if avg_first_5 < 0.02:  # Average less than 2% in first 5 years
        early_bad_performance += 1

print(f"  Simulations with poor early performance (<2% avg first 5 years): {early_bad_performance}/1000 ({early_bad_performance/10:.1%})")